service: chrome-serp

package:
  individually: true
useDotenv: true
provider:
  name: aws
  versionFunctions: false
  runtime: nodejs18.x
  region: us-east-1
  memorySize: 2048
  timeout: 240
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "*"
  stage: ${env:NODE_ENV, 'dev'}
  environment:
    STAGE: ${env:NODE_ENV, 'dev'}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}

functions:
  scrape:
    handler: scrape.handler
    events:
      - http:
          path: scrape
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                url: true
    package:
      patterns:
        - '!./**'
        - 'google.js'
        - 'scrape.js'
        - 'utils.js'
        - 'package.json'
    layers:
      - !Ref ChromiumLambdaLayer
      - !Ref DependenciesLambdaLayer

layers:
  chromium:
    package:
      artifact: 'layers/chromium-v116.0.0.zip'
  dependencies:
    path: 'layers'
    package:
      patterns:
        - '!chromium-v116.0.0.zip'

#plugins:
#  - serverless-offline

resources:
  Resources:

    #Domain Name (ie. iwaduarte.dev)
    DomainName:
      Type: "AWS::ApiGateway::DomainName"
      Properties:
        DomainName: ${env:CUSTOM_DOMAIN_NAME}
        CertificateArn: ${env:CERTIFICATE_ARN}
        EndpointConfiguration:
          Types:
            - EDGE #PRIVATE or EDGE

    #Base Mappings  (points CustomDomain Name to specific ApiGateway)
    BasePathMapping:
      Type: "AWS::ApiGateway::BasePathMapping"
      Properties:
        #        BasePath: ${env:BASE_PATH, ''}
        DomainName:
          Ref: DomainName
        RestApiId: { "Ref": "ApiGatewayRestApi" }
        Stage: ${self:provider.stage}
#      DependsOn:
#        - ApiGatewayDeployment

    # Record Set in route 53
    RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${env:HOSTED_ZONE_NAME}
        Name: ${env:CUSTOM_DOMAIN_NAME}
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::GetAtt: [ "DomainName", "DistributionHostedZoneId" ]
          DNSName:
            Fn::GetAtt: [ "DomainName", "DistributionDomainName" ]

    # Api Gateway Deployment
#    ApiGatewayDeployment:
#      Type: 'AWS::ApiGateway::Deployment'
#      Properties:
#        RestApiId:
#          Ref: "ApiGatewayRestApi"
#        StageName: ${self:provider.stage}
#




